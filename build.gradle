plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.lauratraining'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'

	// Lombok
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MapStruct
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	// MySQL Connector
	runtimeOnly 'com.mysql:mysql-connector-j'

	// OpenAPI (Swagger UI)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Configuraci√≥n adicional para procesadores de anotaciones
tasks.withType(JavaCompile) {
	options.annotationProcessorPath = configurations.annotationProcessor
}